Basic
  Primitive Types and User Defined Data Types
    bit(bool), [u]int8, [u]int16, [u]int32, [u]int64, float32, float64, etc, and their operations.
    array
    pointers
    struct
  Control Flow
    if-else, while, for, do-while
  Function Definition
    prototype (return type and name, function name, parameter list), function body
  Memory Management
    c-heap-lib, providing malloc/realloc/free
    gc-lib in the future, providing malloc

Further Breakdowns & Tentative Syntax
  Variable Declaration
    # without initialization, values are a special value `undefined`

      (var TYPE NAME)
      (var int i)
      (var double d)

  Linkage
  Binary export, source export, etc.

  Variable Assignment

    (set NAME VALUE)   (set i 3)
    # pattern matching style assignment should be added in the future.

  Struct Definition
    
    (struct NAME [MEMBERS]) # MEMBER : (TYPE NAME)
    (struct int-pair [(int l) (int r)])

  Control Flow
    
    # if *statement*, not *expression*
    (if CONDITION
        THEN-BLOCK
        ELSE-BLOCK) # a block could be a dummy block `(dummy)`

    (while CONDITION
           LOOP-BODY)
    (while (bool True) (set [(s "infinite loop")]))

    # Convert all FORs to WHILEs

  Function Definition
    
    (function NAME [PARAMETERS] RETURN-TYPE 
      FUNCTION-BODY) # PARAMETER : (TYPE NAME)
    (function add [(int a) (int b)] int
      (+ a b))

  To be continued ...

NOTE:
  The more I write the more it resembles lisp
  should take more time to think than write
